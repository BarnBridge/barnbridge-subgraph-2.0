// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddedTranche extends ethereum.Event {
  get params(): AddedTranche__Params {
    return new AddedTranche__Params(this);
  }
}

export class AddedTranche__Params {
  _event: AddedTranche;

  constructor(event: AddedTranche) {
    this._event = event;
  }

  get eToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IssuedEToken extends ethereum.Event {
  get params(): IssuedEToken__Params {
    return new IssuedEToken__Params(this);
  }
}

export class IssuedEToken__Params {
  _event: IssuedEToken;

  constructor(event: IssuedEToken) {
    this._event = event;
  }

  get eToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class RebalancedTranches extends ethereum.Event {
  get params(): RebalancedTranches__Params {
    return new RebalancedTranches__Params(this);
  }
}

export class RebalancedTranches__Params {
  _event: RebalancedTranches;

  constructor(event: RebalancedTranches) {
    this._event = event;
  }

  get deltaA(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get deltaB(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get rChange(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get rDiv(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RecoveredToken extends ethereum.Event {
  get params(): RecoveredToken__Params {
    return new RecoveredToken__Params(this);
  }
}

export class RecoveredToken__Params {
  _event: RecoveredToken;

  constructor(event: RecoveredToken) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RedeemedEToken extends ethereum.Event {
  get params(): RedeemedEToken__Params {
    return new RedeemedEToken__Params(this);
  }
}

export class RedeemedEToken__Params {
  _event: RedeemedEToken;

  constructor(event: RedeemedEToken) {
    this._event = event;
  }

  get eToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amountA(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class SetAggregator extends ethereum.Event {
  get params(): SetAggregator__Params {
    return new SetAggregator__Params(this);
  }
}

export class SetAggregator__Params {
  _event: SetAggregator;

  constructor(event: SetAggregator) {
    this._event = event;
  }

  get aggregator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inverseRate(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetController extends ethereum.Event {
  get params(): SetController__Params {
    return new SetController__Params(this);
  }
}

export class SetController__Params {
  _event: SetController;

  constructor(event: SetController) {
    this._event = event;
  }

  get controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetFeeRate extends ethereum.Event {
  get params(): SetFeeRate__Params {
    return new SetFeeRate__Params(this);
  }
}

export class SetFeeRate__Params {
  _event: SetFeeRate;

  constructor(event: SetFeeRate) {
    this._event = event;
  }

  get feeRate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetMinRDiv extends ethereum.Event {
  get params(): SetMinRDiv__Params {
    return new SetMinRDiv__Params(this);
  }
}

export class SetMinRDiv__Params {
  _event: SetMinRDiv;

  constructor(event: SetMinRDiv) {
    this._event = event;
  }

  get minRDiv(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetRebalanceInterval extends ethereum.Event {
  get params(): SetRebalanceInterval__Params {
    return new SetRebalanceInterval__Params(this);
  }
}

export class SetRebalanceInterval__Params {
  _event: SetRebalanceInterval;

  constructor(event: SetRebalanceInterval) {
    this._event = event;
  }

  get interval(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferFees extends ethereum.Event {
  get params(): TransferFees__Params {
    return new TransferFees__Params(this);
  }
}

export class TransferFees__Params {
  _event: TransferFees;

  constructor(event: TransferFees) {
    this._event = event;
  }

  get feesOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get cumulativeFeeA(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cumulativeFeeB(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SmartExposure_WETH_WBTC__getTrancheResultValue0Struct extends ethereum.Tuple {
  get eToken(): Address {
    return this[0].toAddress();
  }

  get sFactorE(): BigInt {
    return this[1].toBigInt();
  }

  get reserveA(): BigInt {
    return this[2].toBigInt();
  }

  get reserveB(): BigInt {
    return this[3].toBigInt();
  }

  get targetRatio(): BigInt {
    return this[4].toBigInt();
  }
}

export class SmartExposure_WETH_WBTC__getTranchesResult_tranchesStruct extends ethereum.Tuple {
  get eToken(): Address {
    return this[0].toAddress();
  }

  get sFactorE(): BigInt {
    return this[1].toBigInt();
  }

  get reserveA(): BigInt {
    return this[2].toBigInt();
  }

  get reserveB(): BigInt {
    return this[3].toBigInt();
  }

  get targetRatio(): BigInt {
    return this[4].toBigInt();
  }
}

export class SmartExposure_WETH_WBTC__issueExactResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SmartExposure_WETH_WBTC__rebalanceResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class SmartExposure_WETH_WBTC__redeemExactResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SmartExposure_WETH_WBTC__tranchesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class SmartExposure_WETH_WBTC extends ethereum.SmartContract {
  static bind(address: Address): SmartExposure_WETH_WBTC {
    return new SmartExposure_WETH_WBTC("SmartExposure_WETH_WBTC", address);
  }

  FEE_RATE_LIMIT(): BigInt {
    let result = super.call("FEE_RATE_LIMIT", "FEE_RATE_LIMIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_FEE_RATE_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_RATE_LIMIT",
      "FEE_RATE_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TRANCHE_LIMIT(): BigInt {
    let result = super.call("TRANCHE_LIMIT", "TRANCHE_LIMIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TRANCHE_LIMIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TRANCHE_LIMIT",
      "TRANCHE_LIMIT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addTranche(
    targetRatio: BigInt,
    eTokenName: string,
    eTokenSymbol: string
  ): boolean {
    let result = super.call(
      "addTranche",
      "addTranche(uint256,string,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(targetRatio),
        ethereum.Value.fromString(eTokenName),
        ethereum.Value.fromString(eTokenSymbol)
      ]
    );

    return result[0].toBoolean();
  }

  try_addTranche(
    targetRatio: BigInt,
    eTokenName: string,
    eTokenSymbol: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "addTranche",
      "addTranche(uint256,string,string):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(targetRatio),
        ethereum.Value.fromString(eTokenName),
        ethereum.Value.fromString(eTokenSymbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cumulativeFeeA(): BigInt {
    let result = super.call("cumulativeFeeA", "cumulativeFeeA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cumulativeFeeA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeFeeA",
      "cumulativeFeeA():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cumulativeFeeB(): BigInt {
    let result = super.call("cumulativeFeeB", "cumulativeFeeB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cumulativeFeeB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cumulativeFeeB",
      "cumulativeFeeB():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  eTokenFactory(): Address {
    let result = super.call("eTokenFactory", "eTokenFactory():(address)", []);

    return result[0].toAddress();
  }

  try_eTokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "eTokenFactory",
      "eTokenFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRate(): BigInt {
    let result = super.call("feeRate", "feeRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeRate", "feeRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAggregator(): Address {
    let result = super.call("getAggregator", "getAggregator():(address)", []);

    return result[0].toAddress();
  }

  try_getAggregator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAggregator",
      "getAggregator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getController(): Address {
    let result = super.call("getController", "getController():(address)", []);

    return result[0].toAddress();
  }

  try_getController(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getController",
      "getController():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRate(): BigInt {
    let result = super.call("getRate", "getRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getRate", "getRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTranche(
    eToken: Address
  ): SmartExposure_WETH_WBTC__getTrancheResultValue0Struct {
    let result = super.call(
      "getTranche",
      "getTranche(address):((address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(eToken)]
    );

    return result[0].toTuple() as SmartExposure_WETH_WBTC__getTrancheResultValue0Struct;
  }

  try_getTranche(
    eToken: Address
  ): ethereum.CallResult<
    SmartExposure_WETH_WBTC__getTrancheResultValue0Struct
  > {
    let result = super.tryCall(
      "getTranche",
      "getTranche(address):((address,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(eToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as SmartExposure_WETH_WBTC__getTrancheResultValue0Struct
    );
  }

  getTranches(): Array<
    SmartExposure_WETH_WBTC__getTranchesResult_tranchesStruct
  > {
    let result = super.call(
      "getTranches",
      "getTranches():((address,uint256,uint256,uint256,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      SmartExposure_WETH_WBTC__getTranchesResult_tranchesStruct
    >();
  }

  try_getTranches(): ethereum.CallResult<
    Array<SmartExposure_WETH_WBTC__getTranchesResult_tranchesStruct>
  > {
    let result = super.tryCall(
      "getTranches",
      "getTranches():((address,uint256,uint256,uint256,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        SmartExposure_WETH_WBTC__getTranchesResult_tranchesStruct
      >()
    );
  }

  issueExact(
    eToken: Address,
    amount: BigInt
  ): SmartExposure_WETH_WBTC__issueExactResult {
    let result = super.call(
      "issueExact",
      "issueExact(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(eToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new SmartExposure_WETH_WBTC__issueExactResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_issueExact(
    eToken: Address,
    amount: BigInt
  ): ethereum.CallResult<SmartExposure_WETH_WBTC__issueExactResult> {
    let result = super.tryCall(
      "issueExact",
      "issueExact(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(eToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartExposure_WETH_WBTC__issueExactResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  lastRebalance(): BigInt {
    let result = super.call("lastRebalance", "lastRebalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastRebalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRebalance",
      "lastRebalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalance(fracDelta: BigInt): SmartExposure_WETH_WBTC__rebalanceResult {
    let result = super.call(
      "rebalance",
      "rebalance(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(fracDelta)]
    );

    return new SmartExposure_WETH_WBTC__rebalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_rebalance(
    fracDelta: BigInt
  ): ethereum.CallResult<SmartExposure_WETH_WBTC__rebalanceResult> {
    let result = super.tryCall(
      "rebalance",
      "rebalance(uint256):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(fracDelta)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartExposure_WETH_WBTC__rebalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  rebalanceInterval(): BigInt {
    let result = super.call(
      "rebalanceInterval",
      "rebalanceInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceInterval",
      "rebalanceInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceMinRDiv(): BigInt {
    let result = super.call(
      "rebalanceMinRDiv",
      "rebalanceMinRDiv():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceMinRDiv(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceMinRDiv",
      "rebalanceMinRDiv():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recover(token: Address, amount: BigInt): boolean {
    let result = super.call("recover", "recover(address,uint256):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_recover(token: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("recover", "recover(address,uint256):(bool)", [
      ethereum.Value.fromAddress(token),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redeemExact(
    eToken: Address,
    amount: BigInt
  ): SmartExposure_WETH_WBTC__redeemExactResult {
    let result = super.call(
      "redeemExact",
      "redeemExact(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(eToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new SmartExposure_WETH_WBTC__redeemExactResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_redeemExact(
    eToken: Address,
    amount: BigInt
  ): ethereum.CallResult<SmartExposure_WETH_WBTC__redeemExactResult> {
    let result = super.tryCall(
      "redeemExact",
      "redeemExact(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(eToken),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartExposure_WETH_WBTC__redeemExactResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  sFactorA(): BigInt {
    let result = super.call("sFactorA", "sFactorA():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sFactorA(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sFactorA", "sFactorA():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sFactorB(): BigInt {
    let result = super.call("sFactorB", "sFactorB():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sFactorB(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sFactorB", "sFactorB():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  setAggregator(_aggregator: Address, inverseRate: boolean): boolean {
    let result = super.call(
      "setAggregator",
      "setAggregator(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(_aggregator),
        ethereum.Value.fromBoolean(inverseRate)
      ]
    );

    return result[0].toBoolean();
  }

  try_setAggregator(
    _aggregator: Address,
    inverseRate: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setAggregator",
      "setAggregator(address,bool):(bool)",
      [
        ethereum.Value.fromAddress(_aggregator),
        ethereum.Value.fromBoolean(inverseRate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setController(_controller: Address): boolean {
    let result = super.call("setController", "setController(address):(bool)", [
      ethereum.Value.fromAddress(_controller)
    ]);

    return result[0].toBoolean();
  }

  try_setController(_controller: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setController",
      "setController(address):(bool)",
      [ethereum.Value.fromAddress(_controller)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setFeeRate(_feeRate: BigInt): boolean {
    let result = super.call("setFeeRate", "setFeeRate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_feeRate)
    ]);

    return result[0].toBoolean();
  }

  try_setFeeRate(_feeRate: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("setFeeRate", "setFeeRate(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_feeRate)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setMinRDiv(minRDiv: BigInt): boolean {
    let result = super.call("setMinRDiv", "setMinRDiv(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(minRDiv)
    ]);

    return result[0].toBoolean();
  }

  try_setMinRDiv(minRDiv: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("setMinRDiv", "setMinRDiv(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(minRDiv)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  setRebalanceInterval(interval: BigInt): boolean {
    let result = super.call(
      "setRebalanceInterval",
      "setRebalanceInterval(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );

    return result[0].toBoolean();
  }

  try_setRebalanceInterval(interval: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setRebalanceInterval",
      "setRebalanceInterval(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(interval)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenA(): Address {
    let result = super.call("tokenA", "tokenA():(address)", []);

    return result[0].toAddress();
  }

  try_tokenA(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenA", "tokenA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenB(): Address {
    let result = super.call("tokenB", "tokenB():(address)", []);

    return result[0].toAddress();
  }

  try_tokenB(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenB", "tokenB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tranches(param0: Address): SmartExposure_WETH_WBTC__tranchesResult {
    let result = super.call(
      "tranches",
      "tranches(address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SmartExposure_WETH_WBTC__tranchesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_tranches(
    param0: Address
  ): ethereum.CallResult<SmartExposure_WETH_WBTC__tranchesResult> {
    let result = super.tryCall(
      "tranches",
      "tranches(address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SmartExposure_WETH_WBTC__tranchesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  tranchesByIndex(param0: BigInt): Address {
    let result = super.call(
      "tranchesByIndex",
      "tranchesByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tranchesByIndex(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tranchesByIndex",
      "tranchesByIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  transferFees(): boolean {
    let result = super.call("transferFees", "transferFees():(bool)", []);

    return result[0].toBoolean();
  }

  try_transferFees(): ethereum.CallResult<boolean> {
    let result = super.tryCall("transferFees", "transferFees():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _eTokenFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenA(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _aggregator(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get inverseRate(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTrancheCall extends ethereum.Call {
  get inputs(): AddTrancheCall__Inputs {
    return new AddTrancheCall__Inputs(this);
  }

  get outputs(): AddTrancheCall__Outputs {
    return new AddTrancheCall__Outputs(this);
  }
}

export class AddTrancheCall__Inputs {
  _call: AddTrancheCall;

  constructor(call: AddTrancheCall) {
    this._call = call;
  }

  get targetRatio(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get eTokenName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get eTokenSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddTrancheCall__Outputs {
  _call: AddTrancheCall;

  constructor(call: AddTrancheCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IssueExactCall extends ethereum.Call {
  get inputs(): IssueExactCall__Inputs {
    return new IssueExactCall__Inputs(this);
  }

  get outputs(): IssueExactCall__Outputs {
    return new IssueExactCall__Outputs(this);
  }
}

export class IssueExactCall__Inputs {
  _call: IssueExactCall;

  constructor(call: IssueExactCall) {
    this._call = call;
  }

  get eToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IssueExactCall__Outputs {
  _call: IssueExactCall;

  constructor(call: IssueExactCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get fracDelta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get deltaA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get deltaB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get rChange(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get rDiv(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class RecoverCall extends ethereum.Call {
  get inputs(): RecoverCall__Inputs {
    return new RecoverCall__Inputs(this);
  }

  get outputs(): RecoverCall__Outputs {
    return new RecoverCall__Outputs(this);
  }
}

export class RecoverCall__Inputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverCall__Outputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RedeemExactCall extends ethereum.Call {
  get inputs(): RedeemExactCall__Inputs {
    return new RedeemExactCall__Inputs(this);
  }

  get outputs(): RedeemExactCall__Outputs {
    return new RedeemExactCall__Outputs(this);
  }
}

export class RedeemExactCall__Inputs {
  _call: RedeemExactCall;

  constructor(call: RedeemExactCall) {
    this._call = call;
  }

  get eToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemExactCall__Outputs {
  _call: RedeemExactCall;

  constructor(call: RedeemExactCall) {
    this._call = call;
  }

  get amountA(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amountB(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SetAggregatorCall extends ethereum.Call {
  get inputs(): SetAggregatorCall__Inputs {
    return new SetAggregatorCall__Inputs(this);
  }

  get outputs(): SetAggregatorCall__Outputs {
    return new SetAggregatorCall__Outputs(this);
  }
}

export class SetAggregatorCall__Inputs {
  _call: SetAggregatorCall;

  constructor(call: SetAggregatorCall) {
    this._call = call;
  }

  get _aggregator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inverseRate(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetAggregatorCall__Outputs {
  _call: SetAggregatorCall;

  constructor(call: SetAggregatorCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get _controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetFeeRateCall extends ethereum.Call {
  get inputs(): SetFeeRateCall__Inputs {
    return new SetFeeRateCall__Inputs(this);
  }

  get outputs(): SetFeeRateCall__Outputs {
    return new SetFeeRateCall__Outputs(this);
  }
}

export class SetFeeRateCall__Inputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get _feeRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeRateCall__Outputs {
  _call: SetFeeRateCall;

  constructor(call: SetFeeRateCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetMinRDivCall extends ethereum.Call {
  get inputs(): SetMinRDivCall__Inputs {
    return new SetMinRDivCall__Inputs(this);
  }

  get outputs(): SetMinRDivCall__Outputs {
    return new SetMinRDivCall__Outputs(this);
  }
}

export class SetMinRDivCall__Inputs {
  _call: SetMinRDivCall;

  constructor(call: SetMinRDivCall) {
    this._call = call;
  }

  get minRDiv(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinRDivCall__Outputs {
  _call: SetMinRDivCall;

  constructor(call: SetMinRDivCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetRebalanceIntervalCall extends ethereum.Call {
  get inputs(): SetRebalanceIntervalCall__Inputs {
    return new SetRebalanceIntervalCall__Inputs(this);
  }

  get outputs(): SetRebalanceIntervalCall__Outputs {
    return new SetRebalanceIntervalCall__Outputs(this);
  }
}

export class SetRebalanceIntervalCall__Inputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }

  get interval(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebalanceIntervalCall__Outputs {
  _call: SetRebalanceIntervalCall;

  constructor(call: SetRebalanceIntervalCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFeesCall extends ethereum.Call {
  get inputs(): TransferFeesCall__Inputs {
    return new TransferFeesCall__Inputs(this);
  }

  get outputs(): TransferFeesCall__Outputs {
    return new TransferFeesCall__Outputs(this);
  }
}

export class TransferFeesCall__Inputs {
  _call: TransferFeesCall;

  constructor(call: TransferFeesCall) {
    this._call = call;
  }
}

export class TransferFeesCall__Outputs {
  _call: TransferFeesCall;

  constructor(call: TransferFeesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
