// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balanceAfter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get balanceAfter(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class cUSDCRewardsPool extends ethereum.SmartContract {
  static bind(address: Address): cUSDCRewardsPool {
    return new cUSDCRewardsPool("cUSDCRewardsPool", address);
  }

  balanceBefore(): BigInt {
    let result = super.call("balanceBefore", "balanceBefore():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceBefore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceBefore",
      "balanceBefore():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(param0: Address): BigInt {
    let result = super.call("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balances", "balances(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claim(): BigInt {
    let result = super.call("claim", "claim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentMultiplier(): BigInt {
    let result = super.call(
      "currentMultiplier",
      "currentMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentMultiplier",
      "currentMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastSoftPullTs(): BigInt {
    let result = super.call("lastSoftPullTs", "lastSoftPullTs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastSoftPullTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastSoftPullTs",
      "lastSoftPullTs():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owed(param0: Address): BigInt {
    let result = super.call("owed", "owed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_owed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("owed", "owed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolSize(): BigInt {
    let result = super.call("poolSize", "poolSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_poolSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("poolSize", "poolSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolToken(): Address {
    let result = super.call("poolToken", "poolToken():(address)", []);

    return result[0].toAddress();
  }

  try_poolToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("poolToken", "poolToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardLeft(): BigInt {
    let result = super.call("rewardLeft", "rewardLeft():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardLeft(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardLeft", "rewardLeft():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardNotTransferred(): BigInt {
    let result = super.call(
      "rewardNotTransferred",
      "rewardNotTransferred():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardNotTransferred(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardNotTransferred",
      "rewardNotTransferred():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardRatePerSecond(): BigInt {
    let result = super.call(
      "rewardRatePerSecond",
      "rewardRatePerSecond():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rewardRatePerSecond(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardRatePerSecond",
      "rewardRatePerSecond():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardSource(): Address {
    let result = super.call("rewardSource", "rewardSource():(address)", []);

    return result[0].toAddress();
  }

  try_rewardSource(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardSource", "rewardSource():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userMultiplier(param0: Address): BigInt {
    let result = super.call(
      "userMultiplier",
      "userMultiplier(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userMultiplier(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userMultiplier",
      "userMultiplier(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAndClaim(amount: BigInt): BigInt {
    let result = super.call(
      "withdrawAndClaim",
      "withdrawAndClaim(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_withdrawAndClaim(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAndClaim",
      "withdrawAndClaim(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _poolToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AckFundsCall extends ethereum.Call {
  get inputs(): AckFundsCall__Inputs {
    return new AckFundsCall__Inputs(this);
  }

  get outputs(): AckFundsCall__Outputs {
    return new AckFundsCall__Outputs(this);
  }
}

export class AckFundsCall__Inputs {
  _call: AckFundsCall;

  constructor(call: AckFundsCall) {
    this._call = call;
  }
}

export class AckFundsCall__Outputs {
  _call: AckFundsCall;

  constructor(call: AckFundsCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class PullRewardFromSourceCall extends ethereum.Call {
  get inputs(): PullRewardFromSourceCall__Inputs {
    return new PullRewardFromSourceCall__Inputs(this);
  }

  get outputs(): PullRewardFromSourceCall__Outputs {
    return new PullRewardFromSourceCall__Outputs(this);
  }
}

export class PullRewardFromSourceCall__Inputs {
  _call: PullRewardFromSourceCall;

  constructor(call: PullRewardFromSourceCall) {
    this._call = call;
  }
}

export class PullRewardFromSourceCall__Outputs {
  _call: PullRewardFromSourceCall;

  constructor(call: PullRewardFromSourceCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RewardLeftCall extends ethereum.Call {
  get inputs(): RewardLeftCall__Inputs {
    return new RewardLeftCall__Inputs(this);
  }

  get outputs(): RewardLeftCall__Outputs {
    return new RewardLeftCall__Outputs(this);
  }
}

export class RewardLeftCall__Inputs {
  _call: RewardLeftCall;

  constructor(call: RewardLeftCall) {
    this._call = call;
  }
}

export class RewardLeftCall__Outputs {
  _call: RewardLeftCall;

  constructor(call: RewardLeftCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetRewardRatePerSecondCall extends ethereum.Call {
  get inputs(): SetRewardRatePerSecondCall__Inputs {
    return new SetRewardRatePerSecondCall__Inputs(this);
  }

  get outputs(): SetRewardRatePerSecondCall__Outputs {
    return new SetRewardRatePerSecondCall__Outputs(this);
  }
}

export class SetRewardRatePerSecondCall__Inputs {
  _call: SetRewardRatePerSecondCall;

  constructor(call: SetRewardRatePerSecondCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardRatePerSecondCall__Outputs {
  _call: SetRewardRatePerSecondCall;

  constructor(call: SetRewardRatePerSecondCall) {
    this._call = call;
  }
}

export class SetRewardsSourceCall extends ethereum.Call {
  get inputs(): SetRewardsSourceCall__Inputs {
    return new SetRewardsSourceCall__Inputs(this);
  }

  get outputs(): SetRewardsSourceCall__Outputs {
    return new SetRewardsSourceCall__Outputs(this);
  }
}

export class SetRewardsSourceCall__Inputs {
  _call: SetRewardsSourceCall;

  constructor(call: SetRewardsSourceCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardsSourceCall__Outputs {
  _call: SetRewardsSourceCall;

  constructor(call: SetRewardsSourceCall) {
    this._call = call;
  }
}

export class SoftPullRewardCall extends ethereum.Call {
  get inputs(): SoftPullRewardCall__Inputs {
    return new SoftPullRewardCall__Inputs(this);
  }

  get outputs(): SoftPullRewardCall__Outputs {
    return new SoftPullRewardCall__Outputs(this);
  }
}

export class SoftPullRewardCall__Inputs {
  _call: SoftPullRewardCall;

  constructor(call: SoftPullRewardCall) {
    this._call = call;
  }
}

export class SoftPullRewardCall__Outputs {
  _call: SoftPullRewardCall;

  constructor(call: SoftPullRewardCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawAndClaimCall extends ethereum.Call {
  get inputs(): WithdrawAndClaimCall__Inputs {
    return new WithdrawAndClaimCall__Inputs(this);
  }

  get outputs(): WithdrawAndClaimCall__Outputs {
    return new WithdrawAndClaimCall__Outputs(this);
  }
}

export class WithdrawAndClaimCall__Inputs {
  _call: WithdrawAndClaimCall;

  constructor(call: WithdrawAndClaimCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawAndClaimCall__Outputs {
  _call: WithdrawAndClaimCall;

  constructor(call: WithdrawAndClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
