// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DAORewardsPool__pullFeatureResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class DAORewardsPool extends ethereum.SmartContract {
  static bind(address: Address): DAORewardsPool {
    return new DAORewardsPool("DAORewardsPool", address);
  }

  balanceBefore(): BigInt {
    let result = super.call("balanceBefore", "balanceBefore():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balanceBefore(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceBefore",
      "balanceBefore():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  barn(): Address {
    let result = super.call("barn", "barn():(address)", []);

    return result[0].toAddress();
  }

  try_barn(): ethereum.CallResult<Address> {
    let result = super.tryCall("barn", "barn():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  claim(): BigInt {
    let result = super.call("claim", "claim():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claim(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claim", "claim():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentMultiplier(): BigInt {
    let result = super.call(
      "currentMultiplier",
      "currentMultiplier():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_currentMultiplier(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentMultiplier",
      "currentMultiplier():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  disabled(): boolean {
    let result = super.call("disabled", "disabled():(bool)", []);

    return result[0].toBoolean();
  }

  try_disabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall("disabled", "disabled():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastPullTs(): BigInt {
    let result = super.call("lastPullTs", "lastPullTs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastPullTs(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastPullTs", "lastPullTs():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owed(param0: Address): BigInt {
    let result = super.call("owed", "owed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_owed(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("owed", "owed(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pullFeature(): DAORewardsPool__pullFeatureResult {
    let result = super.call(
      "pullFeature",
      "pullFeature():(address,uint256,uint256,uint256,uint256)",
      []
    );

    return new DAORewardsPool__pullFeatureResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_pullFeature(): ethereum.CallResult<DAORewardsPool__pullFeatureResult> {
    let result = super.tryCall(
      "pullFeature",
      "pullFeature():(address,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DAORewardsPool__pullFeatureResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userMultiplier(param0: Address): BigInt {
    let result = super.call(
      "userMultiplier",
      "userMultiplier(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userMultiplier(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userMultiplier",
      "userMultiplier(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _barn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AckFundsCall extends ethereum.Call {
  get inputs(): AckFundsCall__Inputs {
    return new AckFundsCall__Inputs(this);
  }

  get outputs(): AckFundsCall__Outputs {
    return new AckFundsCall__Outputs(this);
  }
}

export class AckFundsCall__Inputs {
  _call: AckFundsCall;

  constructor(call: AckFundsCall) {
    this._call = call;
  }
}

export class AckFundsCall__Outputs {
  _call: AckFundsCall;

  constructor(call: AckFundsCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterUserActionCall extends ethereum.Call {
  get inputs(): RegisterUserActionCall__Inputs {
    return new RegisterUserActionCall__Inputs(this);
  }

  get outputs(): RegisterUserActionCall__Outputs {
    return new RegisterUserActionCall__Outputs(this);
  }
}

export class RegisterUserActionCall__Inputs {
  _call: RegisterUserActionCall;

  constructor(call: RegisterUserActionCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterUserActionCall__Outputs {
  _call: RegisterUserActionCall;

  constructor(call: RegisterUserActionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBarnCall extends ethereum.Call {
  get inputs(): SetBarnCall__Inputs {
    return new SetBarnCall__Inputs(this);
  }

  get outputs(): SetBarnCall__Outputs {
    return new SetBarnCall__Outputs(this);
  }
}

export class SetBarnCall__Inputs {
  _call: SetBarnCall;

  constructor(call: SetBarnCall) {
    this._call = call;
  }

  get _barn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBarnCall__Outputs {
  _call: SetBarnCall;

  constructor(call: SetBarnCall) {
    this._call = call;
  }
}

export class SetupPullTokenCall extends ethereum.Call {
  get inputs(): SetupPullTokenCall__Inputs {
    return new SetupPullTokenCall__Inputs(this);
  }

  get outputs(): SetupPullTokenCall__Outputs {
    return new SetupPullTokenCall__Outputs(this);
  }
}

export class SetupPullTokenCall__Inputs {
  _call: SetupPullTokenCall;

  constructor(call: SetupPullTokenCall) {
    this._call = call;
  }

  get source(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get startTs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get endTs(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetupPullTokenCall__Outputs {
  _call: SetupPullTokenCall;

  constructor(call: SetupPullTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
