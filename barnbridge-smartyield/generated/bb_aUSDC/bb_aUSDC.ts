// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BuyJuniorBond extends ethereum.Event {
  get params(): BuyJuniorBond__Params {
    return new BuyJuniorBond__Params(this);
  }
}

export class BuyJuniorBond__Params {
  _event: BuyJuniorBond;

  constructor(event: BuyJuniorBond) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get juniorBondId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maturesAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BuySeniorBond extends ethereum.Event {
  get params(): BuySeniorBond__Params {
    return new BuySeniorBond__Params(this);
  }
}

export class BuySeniorBond__Params {
  _event: BuySeniorBond;

  constructor(event: BuySeniorBond) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seniorBondId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get underlyingIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get gain(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get forDays(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BuyTokens extends ethereum.Event {
  get params(): BuyTokens__Params {
    return new BuyTokens__Params(this);
  }
}

export class BuyTokens__Params {
  _event: BuyTokens;

  constructor(event: BuyTokens) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underlyingIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokensOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RedeemJuniorBond extends ethereum.Event {
  get params(): RedeemJuniorBond__Params {
    return new RedeemJuniorBond__Params(this);
  }
}

export class RedeemJuniorBond__Params {
  _event: RedeemJuniorBond;

  constructor(event: RedeemJuniorBond) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get juniorBondId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get underlyingOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RedeemSeniorBond extends ethereum.Event {
  get params(): RedeemSeniorBond__Params {
    return new RedeemSeniorBond__Params(this);
  }
}

export class RedeemSeniorBond__Params {
  _event: RedeemSeniorBond;

  constructor(event: RedeemSeniorBond) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seniorBondId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SellTokens extends ethereum.Event {
  get params(): SellTokens__Params {
    return new SellTokens__Params(this);
  }
}

export class SellTokens__Params {
  _event: SellTokens;

  constructor(event: SellTokens) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokensIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get underlyingOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get forfeits(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class bb_aUSDC__abondResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class bb_aUSDC__juniorBondsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class bb_aUSDC__juniorBondsMaturingAtResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class bb_aUSDC__seniorBondsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class bb_aUSDC extends ethereum.SmartContract {
  static bind(address: Address): bb_aUSDC {
    return new bb_aUSDC("bb_aUSDC", address);
  }

  EXP_SCALE(): BigInt {
    let result = super.call("EXP_SCALE", "EXP_SCALE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_EXP_SCALE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("EXP_SCALE", "EXP_SCALE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_UINT256(): BigInt {
    let result = super.call("MAX_UINT256", "MAX_UINT256():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_UINT256(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_UINT256", "MAX_UINT256():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setup(): boolean {
    let result = super.call("_setup", "_setup():(bool)", []);

    return result[0].toBoolean();
  }

  try__setup(): ethereum.CallResult<boolean> {
    let result = super.tryCall("_setup", "_setup():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  abond(): bb_aUSDC__abondResult {
    let result = super.call(
      "abond",
      "abond():(uint256,uint256,uint256,uint256,bool)",
      []
    );

    return new bb_aUSDC__abondResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_abond(): ethereum.CallResult<bb_aUSDC__abondResult> {
    let result = super.tryCall(
      "abond",
      "abond():(uint256,uint256,uint256,uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bb_aUSDC__abondResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  abondDebt(): BigInt {
    let result = super.call("abondDebt", "abondDebt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_abondDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("abondDebt", "abondDebt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  abondGain(): BigInt {
    let result = super.call("abondGain", "abondGain():(uint256)", []);

    return result[0].toBigInt();
  }

  try_abondGain(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("abondGain", "abondGain():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  abondPaid(): BigInt {
    let result = super.call("abondPaid", "abondPaid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_abondPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("abondPaid", "abondPaid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bondGain(principalAmount_: BigInt, forDays_: i32): BigInt {
    let result = super.call("bondGain", "bondGain(uint256,uint16):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(principalAmount_),
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forDays_))
    ]);

    return result[0].toBigInt();
  }

  try_bondGain(
    principalAmount_: BigInt,
    forDays_: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bondGain",
      "bondGain(uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forDays_))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buyBond(
    principalAmount_: BigInt,
    minGain_: BigInt,
    deadline_: BigInt,
    forDays_: i32
  ): BigInt {
    let result = super.call(
      "buyBond",
      "buyBond(uint256,uint256,uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount_),
        ethereum.Value.fromUnsignedBigInt(minGain_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forDays_))
      ]
    );

    return result[0].toBigInt();
  }

  try_buyBond(
    principalAmount_: BigInt,
    minGain_: BigInt,
    deadline_: BigInt,
    forDays_: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buyBond",
      "buyBond(uint256,uint256,uint256,uint16):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount_),
        ethereum.Value.fromUnsignedBigInt(minGain_),
        ethereum.Value.fromUnsignedBigInt(deadline_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(forDays_))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  juniorBond(): Address {
    let result = super.call("juniorBond", "juniorBond():(address)", []);

    return result[0].toAddress();
  }

  try_juniorBond(): ethereum.CallResult<Address> {
    let result = super.tryCall("juniorBond", "juniorBond():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  juniorBondId(): BigInt {
    let result = super.call("juniorBondId", "juniorBondId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_juniorBondId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("juniorBondId", "juniorBondId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  juniorBonds(param0: BigInt): bb_aUSDC__juniorBondsResult {
    let result = super.call(
      "juniorBonds",
      "juniorBonds(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bb_aUSDC__juniorBondsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_juniorBonds(
    param0: BigInt
  ): ethereum.CallResult<bb_aUSDC__juniorBondsResult> {
    let result = super.tryCall(
      "juniorBonds",
      "juniorBonds(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bb_aUSDC__juniorBondsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  juniorBondsMaturingAt(param0: BigInt): bb_aUSDC__juniorBondsMaturingAtResult {
    let result = super.call(
      "juniorBondsMaturingAt",
      "juniorBondsMaturingAt(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bb_aUSDC__juniorBondsMaturingAtResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_juniorBondsMaturingAt(
    param0: BigInt
  ): ethereum.CallResult<bb_aUSDC__juniorBondsMaturingAtResult> {
    let result = super.tryCall(
      "juniorBondsMaturingAt",
      "juniorBondsMaturingAt(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bb_aUSDC__juniorBondsMaturingAtResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  juniorBondsMaturities(param0: BigInt): BigInt {
    let result = super.call(
      "juniorBondsMaturities",
      "juniorBondsMaturities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_juniorBondsMaturities(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorBondsMaturities",
      "juniorBondsMaturities(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  juniorBondsMaturitiesPrev(): BigInt {
    let result = super.call(
      "juniorBondsMaturitiesPrev",
      "juniorBondsMaturitiesPrev():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_juniorBondsMaturitiesPrev(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorBondsMaturitiesPrev",
      "juniorBondsMaturitiesPrev():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxBondDailyRate(): BigInt {
    let result = super.call(
      "maxBondDailyRate",
      "maxBondDailyRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxBondDailyRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxBondDailyRate",
      "maxBondDailyRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(uint256)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorBond(): Address {
    let result = super.call("seniorBond", "seniorBond():(address)", []);

    return result[0].toAddress();
  }

  try_seniorBond(): ethereum.CallResult<Address> {
    let result = super.tryCall("seniorBond", "seniorBond():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seniorBondId(): BigInt {
    let result = super.call("seniorBondId", "seniorBondId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_seniorBondId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seniorBondId", "seniorBondId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seniorBonds(param0: BigInt): bb_aUSDC__seniorBondsResult {
    let result = super.call(
      "seniorBonds",
      "seniorBonds(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bb_aUSDC__seniorBondsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_seniorBonds(
    param0: BigInt
  ): ethereum.CallResult<bb_aUSDC__seniorBondsResult> {
    let result = super.tryCall(
      "seniorBonds",
      "seniorBonds(uint256):(uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bb_aUSDC__seniorBondsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokensInJuniorBonds(): BigInt {
    let result = super.call(
      "tokensInJuniorBonds",
      "tokensInJuniorBonds():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensInJuniorBonds(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensInJuniorBonds",
      "tokensInJuniorBonds():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlyingJuniors(): BigInt {
    let result = super.call(
      "underlyingJuniors",
      "underlyingJuniors():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingJuniors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingJuniors",
      "underlyingJuniors():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingLiquidatedJuniors(): BigInt {
    let result = super.call(
      "underlyingLiquidatedJuniors",
      "underlyingLiquidatedJuniors():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingLiquidatedJuniors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingLiquidatedJuniors",
      "underlyingLiquidatedJuniors():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingLoanable(): BigInt {
    let result = super.call(
      "underlyingLoanable",
      "underlyingLoanable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingLoanable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingLoanable",
      "underlyingLoanable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingTotal(): BigInt {
    let result = super.call(
      "underlyingTotal",
      "underlyingTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_underlyingTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "underlyingTotal",
      "underlyingTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get decimals_(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BondGainCall extends ethereum.Call {
  get inputs(): BondGainCall__Inputs {
    return new BondGainCall__Inputs(this);
  }

  get outputs(): BondGainCall__Outputs {
    return new BondGainCall__Outputs(this);
  }
}

export class BondGainCall__Inputs {
  _call: BondGainCall;

  constructor(call: BondGainCall) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get forDays_(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class BondGainCall__Outputs {
  _call: BondGainCall;

  constructor(call: BondGainCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyBondCall extends ethereum.Call {
  get inputs(): BuyBondCall__Inputs {
    return new BuyBondCall__Inputs(this);
  }

  get outputs(): BuyBondCall__Outputs {
    return new BuyBondCall__Outputs(this);
  }
}

export class BuyBondCall__Inputs {
  _call: BuyBondCall;

  constructor(call: BuyBondCall) {
    this._call = call;
  }

  get principalAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minGain_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get forDays_(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class BuyBondCall__Outputs {
  _call: BuyBondCall;

  constructor(call: BuyBondCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BuyJuniorBondCall extends ethereum.Call {
  get inputs(): BuyJuniorBondCall__Inputs {
    return new BuyJuniorBondCall__Inputs(this);
  }

  get outputs(): BuyJuniorBondCall__Outputs {
    return new BuyJuniorBondCall__Outputs(this);
  }
}

export class BuyJuniorBondCall__Inputs {
  _call: BuyJuniorBondCall;

  constructor(call: BuyJuniorBondCall) {
    this._call = call;
  }

  get tokenAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get maxMaturesAt_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyJuniorBondCall__Outputs {
  _call: BuyJuniorBondCall;

  constructor(call: BuyJuniorBondCall) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get underlyingAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minTokens_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class LiquidateJuniorBondsCall extends ethereum.Call {
  get inputs(): LiquidateJuniorBondsCall__Inputs {
    return new LiquidateJuniorBondsCall__Inputs(this);
  }

  get outputs(): LiquidateJuniorBondsCall__Outputs {
    return new LiquidateJuniorBondsCall__Outputs(this);
  }
}

export class LiquidateJuniorBondsCall__Inputs {
  _call: LiquidateJuniorBondsCall;

  constructor(call: LiquidateJuniorBondsCall) {
    this._call = call;
  }

  get upUntilTimestamp_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateJuniorBondsCall__Outputs {
  _call: LiquidateJuniorBondsCall;

  constructor(call: LiquidateJuniorBondsCall) {
    this._call = call;
  }
}

export class MaxBondDailyRateCall extends ethereum.Call {
  get inputs(): MaxBondDailyRateCall__Inputs {
    return new MaxBondDailyRateCall__Inputs(this);
  }

  get outputs(): MaxBondDailyRateCall__Outputs {
    return new MaxBondDailyRateCall__Outputs(this);
  }
}

export class MaxBondDailyRateCall__Inputs {
  _call: MaxBondDailyRateCall;

  constructor(call: MaxBondDailyRateCall) {
    this._call = call;
  }
}

export class MaxBondDailyRateCall__Outputs {
  _call: MaxBondDailyRateCall;

  constructor(call: MaxBondDailyRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PriceCall extends ethereum.Call {
  get inputs(): PriceCall__Inputs {
    return new PriceCall__Inputs(this);
  }

  get outputs(): PriceCall__Outputs {
    return new PriceCall__Outputs(this);
  }
}

export class PriceCall__Inputs {
  _call: PriceCall;

  constructor(call: PriceCall) {
    this._call = call;
  }
}

export class PriceCall__Outputs {
  _call: PriceCall;

  constructor(call: PriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemBondCall extends ethereum.Call {
  get inputs(): RedeemBondCall__Inputs {
    return new RedeemBondCall__Inputs(this);
  }

  get outputs(): RedeemBondCall__Outputs {
    return new RedeemBondCall__Outputs(this);
  }
}

export class RedeemBondCall__Inputs {
  _call: RedeemBondCall;

  constructor(call: RedeemBondCall) {
    this._call = call;
  }

  get bondId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemBondCall__Outputs {
  _call: RedeemBondCall;

  constructor(call: RedeemBondCall) {
    this._call = call;
  }
}

export class RedeemJuniorBondCall extends ethereum.Call {
  get inputs(): RedeemJuniorBondCall__Inputs {
    return new RedeemJuniorBondCall__Inputs(this);
  }

  get outputs(): RedeemJuniorBondCall__Outputs {
    return new RedeemJuniorBondCall__Outputs(this);
  }
}

export class RedeemJuniorBondCall__Inputs {
  _call: RedeemJuniorBondCall;

  constructor(call: RedeemJuniorBondCall) {
    this._call = call;
  }

  get jBondId_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemJuniorBondCall__Outputs {
  _call: RedeemJuniorBondCall;

  constructor(call: RedeemJuniorBondCall) {
    this._call = call;
  }
}

export class SellTokensCall extends ethereum.Call {
  get inputs(): SellTokensCall__Inputs {
    return new SellTokensCall__Inputs(this);
  }

  get outputs(): SellTokensCall__Outputs {
    return new SellTokensCall__Outputs(this);
  }
}

export class SellTokensCall__Inputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }

  get tokenAmount_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minUnderlying_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SellTokensCall__Outputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }
}

export class SetControllerCall extends ethereum.Call {
  get inputs(): SetControllerCall__Inputs {
    return new SetControllerCall__Inputs(this);
  }

  get outputs(): SetControllerCall__Outputs {
    return new SetControllerCall__Outputs(this);
  }
}

export class SetControllerCall__Inputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }

  get newController_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetControllerCall__Outputs {
  _call: SetControllerCall;

  constructor(call: SetControllerCall) {
    this._call = call;
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get controller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get pool_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get seniorBond_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get juniorBond_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnaccountBondsCall extends ethereum.Call {
  get inputs(): UnaccountBondsCall__Inputs {
    return new UnaccountBondsCall__Inputs(this);
  }

  get outputs(): UnaccountBondsCall__Outputs {
    return new UnaccountBondsCall__Outputs(this);
  }
}

export class UnaccountBondsCall__Inputs {
  _call: UnaccountBondsCall;

  constructor(call: UnaccountBondsCall) {
    this._call = call;
  }

  get bondIds_(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UnaccountBondsCall__Outputs {
  _call: UnaccountBondsCall;

  constructor(call: UnaccountBondsCall) {
    this._call = call;
  }
}

export class UnderlyingJuniorsCall extends ethereum.Call {
  get inputs(): UnderlyingJuniorsCall__Inputs {
    return new UnderlyingJuniorsCall__Inputs(this);
  }

  get outputs(): UnderlyingJuniorsCall__Outputs {
    return new UnderlyingJuniorsCall__Outputs(this);
  }
}

export class UnderlyingJuniorsCall__Inputs {
  _call: UnderlyingJuniorsCall;

  constructor(call: UnderlyingJuniorsCall) {
    this._call = call;
  }
}

export class UnderlyingJuniorsCall__Outputs {
  _call: UnderlyingJuniorsCall;

  constructor(call: UnderlyingJuniorsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnderlyingLoanableCall extends ethereum.Call {
  get inputs(): UnderlyingLoanableCall__Inputs {
    return new UnderlyingLoanableCall__Inputs(this);
  }

  get outputs(): UnderlyingLoanableCall__Outputs {
    return new UnderlyingLoanableCall__Outputs(this);
  }
}

export class UnderlyingLoanableCall__Inputs {
  _call: UnderlyingLoanableCall;

  constructor(call: UnderlyingLoanableCall) {
    this._call = call;
  }
}

export class UnderlyingLoanableCall__Outputs {
  _call: UnderlyingLoanableCall;

  constructor(call: UnderlyingLoanableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnderlyingTotalCall extends ethereum.Call {
  get inputs(): UnderlyingTotalCall__Inputs {
    return new UnderlyingTotalCall__Inputs(this);
  }

  get outputs(): UnderlyingTotalCall__Outputs {
    return new UnderlyingTotalCall__Outputs(this);
  }
}

export class UnderlyingTotalCall__Inputs {
  _call: UnderlyingTotalCall;

  constructor(call: UnderlyingTotalCall) {
    this._call = call;
  }
}

export class UnderlyingTotalCall__Outputs {
  _call: UnderlyingTotalCall;

  constructor(call: UnderlyingTotalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
